# Infrastructure Services - Database, Cache, Message Broker, Load Balancer
services:
  # Database
  postgres:
    image: postgres:15-alpine
    container_name: medicalink-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../scripts/init-db.sh:/docker-entrypoint-initdb.d/init-db.sh
    networks:
      - medicalink-network
    restart: unless-stopped
    command: >
      postgres
      -c max_connections=200
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    
    # Logging Configuration - GCP Cloud Logging
    logging:
      driver: gcplogs
      options:
        gcp-project: "medicalink-06"
        gcp-log-cmd: "true"
        gcp-meta-zone: "asia-southeast1-a"
        gcp-meta-name: "medicalink-postgres"
        labels: |
          service=postgres
          environment=production
          component=database

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: medicalink-redis
    volumes:
      - redis_data:/data
    networks:
      - medicalink-network
    command: redis-server --appendonly yes --maxmemory-policy noeviction
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    
    # Logging Configuration - GCP Cloud Logging
    logging:
      driver: gcplogs
      options:
        gcp-project: "medicalink-06"
        gcp-log-cmd: "true"
        gcp-meta-zone: "asia-southeast1-a"
        gcp-meta-name: "medicalink-redis"
        labels: |
          service=redis
          environment=production
          component=cache

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: medicalink-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-admin123}
      RABBITMQ_DEFAULT_VHOST: /
      RABBITMQ_ERLANG_COOKIE: SWQOKODSQALRPCLNMEQG
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - medicalink-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    
    # Logging Configuration - GCP Cloud Logging
    logging:
      driver: gcplogs
      options:
        gcp-project: "medicalink-06"
        gcp-log-cmd: "true"
        gcp-meta-zone: "asia-southeast1-a"
        gcp-meta-name: "medicalink-rabbitmq"
        labels: |
          service=rabbitmq
          environment=production
          component=message-broker

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: medicalink-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../nginx/nginx.conf:/etc/nginx/nginx.conf
      - ../nginx/ssl:/etc/nginx/ssl
    networks:
      - medicalink-network
    restart: unless-stopped
    
    # Logging Configuration - GCP Cloud Logging
    logging:
      driver: gcplogs
      options:
        gcp-project: "medicalink-06"
        gcp-log-cmd: "true"
        gcp-meta-zone: "asia-southeast1-a"
        gcp-meta-name: "medicalink-nginx"
        labels: |
          service=nginx
          environment=production
          component=load-balancer

networks:
  medicalink-network:
    external: true

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data: