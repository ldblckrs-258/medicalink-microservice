# Production Docker Compose
version: '3.8'

services:
  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: medicalink-gateway
    environment:
      - NODE_ENV=production
      - API_GATEWAY_PORT=3000
    ports:
      - "3000:3000"
    networks:
      - medicalink-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: ["node", "dist/apps/api-gateway/main.js"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Accounts Service
  accounts-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: medicalink-accounts
    environment:
      - NODE_ENV=production
      - ACCOUNTS_SERVICE_PORT=3001
    # No external ports - internal service only
    networks:
      - medicalink-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: ["node", "dist/apps/accounts-service/main.js"]
    restart: unless-stopped

  # Provider Directory Service
  provider-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: medicalink-provider
    environment:
      - NODE_ENV=production
      - PROVIDER_SERVICE_PORT=3002
    # No external ports - internal service only
    networks:
      - medicalink-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: ["node", "dist/apps/provider-directory-service/main.js"]
    restart: unless-stopped

  # Booking Service
  booking-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: medicalink-booking
    environment:
      - NODE_ENV=production
      - BOOKING_SERVICE_PORT=3003
    # No external ports - internal service only
    networks:
      - medicalink-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: ["node", "dist/apps/booking-service/main.js"]
    restart: unless-stopped

  # Content Service
  content-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: medicalink-content
    environment:
      - NODE_ENV=production
      - CONTENT_SERVICE_PORT=3004
    # No external ports - internal service only
    networks:
      - medicalink-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: ["node", "dist/apps/content-service/main.js"]
    restart: unless-stopped

  # Notification Service
  notification-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: medicalink-notification
    environment:
      - NODE_ENV=production
      - NOTIFICATION_SERVICE_PORT=3005
    # No external ports - internal service only
    networks:
      - medicalink-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: ["node", "dist/apps/notification-service/main.js"]
    restart: unless-stopped

  # Orchestrator Service
  orchestrator-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: medicalink-orchestrator
    environment:
      - NODE_ENV=production
      - ORCHESTRATOR_SERVICE_PORT=3006
    # No external ports - internal service only
    networks:
      - medicalink-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: ["node", "dist/apps/orchestrator-service/main.js"]
    restart: unless-stopped

  # Database
  postgres:
    image: postgres:15-alpine
    container_name: medicalink-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-medicalink}
      POSTGRES_USER: ${POSTGRES_USER:-medicalink}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - medicalink-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-medicalink} -d ${POSTGRES_DB:-medicalink}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    container_name: medicalink-redis
    volumes:
      - redis_data:/data
    networks:
      - medicalink-network
    command: redis-server --appendonly yes --maxmemory-policy noeviction
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: medicalink-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS:-admin123}
      RABBITMQ_DEFAULT_VHOST: /
      RABBITMQ_ERLANG_COOKIE: SWQOKODSQALRPCLNMEQG
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - medicalink-network
    # No external ports in production - only internal communication
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: medicalink-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - medicalink-network
    depends_on:
      - api-gateway
    restart: unless-stopped

networks:
  medicalink-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data: