generator client {
  provider = "prisma-client-js"
  output   = "./generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  schemas   = ["content"]
}

enum QuestionStatus {
  PENDING
  ANSWERED
  CLOSED

  @@schema("content")
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED

  @@schema("content")
}

model BlogCategory {
  id        String   @id @default(cuid())
  name      String   @unique @db.VarChar(120)
  slug      String   @unique @db.VarChar(140)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  blogs Blog[]

  @@map("blog_categories")
  @@schema("content")
}

model Blog {
  id          String     @id @default(cuid())
  title       String     @db.VarChar(200)
  slug        String     @unique @db.VarChar(220)
  content     String     @db.Text
  categoryId  String     @map("category_id") @db.VarChar(27)
  authorId    String     @map("author_id") @db.VarChar(27)
  status      PostStatus @default(DRAFT)
  publishedAt DateTime?  @map("published_at") @db.Timestamptz(6)
  createdAt   DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime   @updatedAt @map("updated_at") @db.Timestamptz(6)

  category BlogCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("blogs")
  @@schema("content")
}

model Question {
  id        String         @id @default(cuid())
  patientId String         @map("patient_id") @db.VarChar(27)
  title     String         @db.VarChar(200)
  body      String         @db.Text
  status    QuestionStatus @default(PENDING)
  createdAt DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime       @updatedAt @map("updated_at") @db.Timestamptz(6)

  answers Answer[]

  @@map("questions")
  @@schema("content")
}

model Answer {
  id         String   @id @default(cuid())
  questionId String   @map("question_id") @db.VarChar(27)
  doctorId   String   @map("doctor_id") @db.VarChar(27)
  body       String   @db.Text
  isAccepted Boolean  @default(false) @map("is_accepted")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  question Question @relation(fields: [questionId], references: [id])

  @@index([questionId], map: "idx_answers_question")
  @@index([doctorId, createdAt], map: "idx_answers_doctor_created")
  @@map("answers")
  @@schema("content")
}

model Review {
  id        String   @id @default(cuid())
  doctorId  String   @map("doctor_id") @db.VarChar(27)
  patientId String   @map("patient_id") @db.VarChar(27)
  rating    Int      @db.SmallInt
  title     String?  @db.VarChar(160)
  body      String?  @db.Text
  isPublic  Boolean  @default(true) @map("is_public")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@index([doctorId], map: "idx_reviews_doctor")
  @@index([patientId], map: "idx_reviews_patient")
  @@index([rating], map: "idx_reviews_rating")
  @@map("reviews")
  @@schema("content")
}
